/*
 * Copyright 2011- the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

version = '1.17'
group = 'no.entitas.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile 'org.tmatesoft.svnkit:svnkit:1.7.5'
    compile 'org.eclipse.jgit:org.eclipse.jgit:2.1.0.201209190230-r'
    compile 'com.jcraft:jsch:0.1.44-1'

    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
    testCompile 'cglib:cglib-nodep:2.2'
    testCompile 'org.objenesis:objenesis:1.2'
    testCompile 'junit:junit-dep:4.9'

    groovy 'org.codehaus.groovy:groovy-all:1.8.6'
}

// TODO need to create svn/git repos to run the sample on
task integrationTest(type: GradleBuild, dependsOn: build) {
    dir = 'src/sample'
    tasks = ['clean', 'build']
}

task sourcesJar(type: Jar, dependsOn: classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
     archives sourcesJar
     archives javadocJar
}

signing {
    required = { gradle.taskGraph.hasTask("uploadArchives") && !version.endsWith("SNAPSHOT") }
    sign configurations.archives
}

task wrapper(type: Wrapper) { gradleVersion = '1.12' }

ext.defaultProject = {
    name 'Gradle Release plugin'
    // packaging 'jar' (Packaging is set later through direct modification of the xml)
    description 'The Gradle Release plugin makes releasing Gradle projects easy.'
    url 'http://github.com/stianh/gradle-release-plugin'
    inceptionYear '2011'

    scm {
        developerConnection 'git@github.com:stianh/gradle-release-plugin.git'
        connection 'git://github.com/stianh/gradle-release-plugin.git'
        url 'https://github.com/stianh/gradle-release-plugin'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'stianh'
            name 'Stian Hegglund'
            email 'stian.hegglund@gmail.com'
            roles {
                role 'Developer'
            }
            timezone '+1'
        }
        developer {
            id 'mkrabset'
            name 'Marius Krabset'
            email 'marius.krabset@gmail.com'
            roles {
                role 'Developer'
            }
            timezone '+1'
        }
        developer {
            id 'stigkj'
            name 'Stig Kleppe-JÃ¸rgensen'
            email 'from.gradle-release@nisgits.net'
            roles {
                role 'Developer'
            }
            timezone '+1'
        }
    }
}

uploadArchives.repositories.mavenDeployer {
    uniqueVersion = false

    if (!project.hasProperty('sonatypeUsername')) sonatypeUsername = ''
    if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''

    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
    }

    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
    }
}

ext.fixedProject = {
    project defaultProject
    withXml {
        def project = it.asNode()
        project.version[0] + {
            packaging 'jar'
        }
    }
}

uploadArchives.repositories.mavenDeployer {
    pom fixedProject

    beforeDeployment {
        signing.signPom(it)
    }
}
